name: Node.js CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

      - name: Run tests
        run: npm test

  deploy:
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Create deployment package
        run: |
          # Create a clean deployment directory
          mkdir -p deployment
          cp -r server.js package.json package-lock.json .elasticbeanstalk .ebignore Procfile deployment/
          cd deployment

          # Install production dependencies
          npm ci --only=production

          # Create deployment zip
          zip -r ../deployment.zip . -x "node_modules/.cache/*"

      - name: Deploy to Elastic Beanstalk
        run: |
          # Generate version label
          VERSION_LABEL="app-$(date +%y%m%d_%H%M%S)"

          # Get AWS account ID
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          S3_BUCKET="elasticbeanstalk-ap-south-1-$ACCOUNT_ID"

          # Upload to S3
          aws s3 cp deployment.zip s3://$S3_BUCKET/$VERSION_LABEL.zip

          # Create application version
          aws elasticbeanstalk create-application-version \
            --application-name my-node-app \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket="$S3_BUCKET",S3Key="$VERSION_LABEL.zip" \
            --auto-create-application \
            --region ap-south-1

          # Determine environment
          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            ENVIRONMENT="My-node-app-env"
            echo "Deploying to production ($ENVIRONMENT)..."
          else
            ENVIRONMENT="my-node-app-staging"
            echo "Deploying to staging ($ENVIRONMENT)..."
          fi

          # Deploy to environment
          aws elasticbeanstalk update-environment \
            --environment-name "$ENVIRONMENT" \
            --version-label "$VERSION_LABEL" \
            --region ap-south-1
