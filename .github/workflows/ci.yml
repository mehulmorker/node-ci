name: Node.js CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

      - name: Run tests
        run: npm test

  deploy:
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install AWS EB CLI
        run: pip install --upgrade awsebcli

      - name: Configure Git for EB
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Create deployment package
        run: |
          # Create a clean deployment directory
          mkdir -p deployment
          cp -r server.js package.json package-lock.json .elasticbeanstalk .ebignore Procfile deployment/
          cd deployment

          # Install production dependencies
          npm ci --only=production

      - name: Deploy to correct environment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-south-1
        run: |
          cd deployment

          # Initialize EB application
          eb init my-node-app --platform node.js --region $AWS_REGION

          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            echo "Deploying to production (My-node-app-env)..."
            eb deploy My-node-app-env
          else
            echo "Deploying to staging (my-node-app-staging)..."
            eb deploy my-node-app-staging
          fi
